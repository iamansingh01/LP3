
import java.util.Scanner;

class knapsack {
    static int max(int a, int b) {
        return (a > b) ? a : b;
    }

    static int knapSackRec(int W, int wt[], int val[], int n, int[][] dp) {
        if (n == 0 || W == 0)
            return 0;

        if (dp[n][W] != -1)
            return dp[n][W];

        if (wt[n - 1] > W)
            return dp[n][W] = knapSackRec(W, wt, val, n - 1, dp);
        else
            return dp[n][W] = max(val[n - 1] + knapSackRec(W - wt[n - 1], wt, val, n - 1, dp), knapSackRec(W, wt, val, n - 1, dp));
    }

    static int knapSack(int W, int wt[], int val[], int N) {
        int dp[][] = new int[N + 1][W + 1];

        for (int i = 0; i < N + 1; i++)
            for (int j = 0; j < W + 1; j++)
                dp[i][j] = -1;

        return knapSackRec(W, wt, val, N, dp);
    }

    public static void main(String[] args) {
        int choice = 1;
        Scanner sc = new Scanner(System.in);

        while (choice == 1) {
            System.out.print("Enter the number of Items: ");
            int items = sc.nextInt();
            int profit[] = new int[items];
            int weight[] = new int[items];

            for (int i = 0; i < items; i++) {
                System.out.print("Enter the profit of item " + (i + 1) + ": ");
                int p = sc.nextInt();
                profit[i] = p;
                System.out.print("Enter the weight of item " + (i + 1) + ": ");
                int w = sc.nextInt();
                weight[i] = w;
            }

            System.out.print("Enter the capacity of the bag: ");
            int capacity = sc.nextInt();
            int N = profit.length;

            int max_profit = knapSack(capacity, weight, profit, N);
            System.out.println("The max profit is: " + max_profit);
            System.out.print("Do you want to continue(1/0)? : ");
            choice = sc.nextInt();
        }

        sc.close();
    }
}
