import java.util.Scanner;

public class NQueens {
    static int count = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of queens: ");
        int numQueens = scanner.nextInt();
        if(numQueens<=1)
        {
            System.out.println("No Solution");
            return;
        }

        int[][] board = new int[numQueens][numQueens];
        solveNQueens(board, 0);
        System.out.println("Total solutions: " + count);
    }

    // A function to print a solution
    public static void print(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("-----------------");
    }

    // Function to check whether a position is valid or not
    public static boolean isValid(int[][] board, int row, int col) {
        // Loop to check horizontal positions
        for (int i = 0; i < col; i++) {
            if (board[row][i] == 1) {
                return false;
            }
        }

        // Check upper left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check lower left diagonal
        for (int i = row, j = col; i < board.length && j >= 0; i++, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }
        return true;
    }

    // Function to solve the N-Queens problem using backtracking
    public static void solveNQueens(int[][] board, int col) {
        if (col == board.length) {
            print(board);
            count++;
            return;
        }

        for (int i = 0; i < board.length; i++) {
            if (isValid(board, i, col)) {
                board[i][col] = 1;
                solveNQueens(board, col + 1);
                board[i][col] = 0; // Backtracking
            }
        }
    }
}
